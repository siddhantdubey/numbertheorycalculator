{"version":3,"sources":["SingleVarCalculator.js","logic/phi.js","logic/sigma.js","logic/numdivisors.js","App.js","reportWebVitals.js","index.js"],"names":["SVCalculator","props","handleClick","event","setState","result","state","clickHandler","Number","number","preventDefault","handleChange","bind","this","target","value","className","name","onSubmit","onChange","type","id","placeholder","class","React","Component","phi","n","p","parseInt","sigma","sum","i","numdivisors","num","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAIaA,EAAb,kDACI,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAMVC,YAAc,SAACC,GACX,EAAKC,SAAS,CAACC,OAAS,EAAKC,MAAMC,aAAaC,OAAO,EAAKF,MAAMG,WAClEN,EAAMO,kBAPN,EAAKJ,MAAQ,CAAEC,aAAe,EAAKN,MAAMM,aAAcE,OAAQ,EAAGJ,OAAQ,GAC1E,EAAKM,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKV,YAAc,EAAKA,YAAYU,KAAjB,gBAJL,EADtB,gDAaI,SAAaT,GACTU,KAAKT,SAAS,CAACK,OAASN,EAAMW,OAAOC,QACrCZ,EAAMO,mBAfd,oBAkBI,WACI,OACI,sBAAKM,UAAU,aAAf,UACI,6BAAKH,KAAKZ,MAAMgB,OAChB,uBAAMC,SAAUL,KAAKX,YAArB,UACI,wCACA,uBACA,uBAAOiB,SAAUN,KAAKF,aAAcS,KAAK,OAAOC,GAAG,SAASJ,KAAK,SAASK,YAAaT,KAAKP,MAAMG,SAClG,uBACA,uBAAOW,KAAK,SAASG,MAAM,WAC3B,0BAEJ,uBACA,uBACA,2CAAcV,KAAKP,MAAMD,iBAhCzC,GAAkCmB,IAAMC,WCJjC,SAASC,EAAIC,GAQhB,IALA,IAAItB,EAASsB,EAKJC,EAAI,EAAGA,EAAIA,GAAKD,IAAKC,EAI1B,GAAID,EAAIC,IAAM,EAAE,CAGZ,KAAOD,EAAIC,IAAM,GACbD,EAAIE,SAASF,EAAIC,GACrBvB,GAAUwB,SAASxB,EAASuB,GAUpC,OAFID,EAAI,IACJtB,GAAUwB,SAASxB,EAASsB,IACzBtB,EC3BJ,SAASyB,EAAMH,GAGlB,IADA,IAAII,EAAM,EACDC,EAAI,EAAGA,GAAKL,EAAGK,IACdL,EAAIK,IACVD,GAAOC,GAGX,OAAOD,ECRJ,SAASE,EAAYN,GAGxB,IADA,IAAIO,EAAM,EACDF,EAAI,EAAGA,GAAKL,EAAGK,IACdL,EAAIK,IACVE,GAAO,GAGX,OAAOA,E,ICAUC,E,4JACnB,WACE,OACE,sBAAKnB,UAAU,MAAf,UACE,0DACA,wEACA,sBAAKO,MAAM,MAAX,UACE,qBAAKA,MAAM,SAAX,SACE,cAAC,EAAD,CAAcN,KAAK,iBAAiBV,aAAcmB,MAEpD,qBAAKH,MAAM,SAAX,SACE,cAAC,EAAD,CAAcN,KAAK,mBAAmBV,aAAcuB,MAEtD,qBAAKP,MAAM,SAAX,SACE,cAAC,EAAD,CAAcN,KAAK,eAAeV,aAAc0B,SAGpD,sBAAKV,MAAM,MAAX,UACE,qBAAKA,MAAM,WAGX,qBAAKA,MAAM,qB,GArBYC,IAAMC,WCIxBW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6d0a0cde.chunk.js","sourcesContent":["import React from 'react'\r\nimport './SingleVarCalculator.css'\r\n\r\n\r\nexport class SVCalculator extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { clickHandler : this.props.clickHandler, number: 0, result: 0 }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    \r\n    handleClick = (event) => {\r\n        this.setState({result : this.state.clickHandler(Number(this.state.number))});\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({number : event.target.value});\r\n        event.preventDefault();\r\n    }\r\n\r\n    render (){\r\n        return (\r\n            <div className='calculator'>\r\n                <h2>{this.props.name}</h2>\r\n                <form onSubmit={this.handleClick}>\r\n                    <label>n :</label>\r\n                    <br/>\r\n                    <input onChange={this.handleChange} type='text' id='number' name='number' placeholder={this.state.number}/>\r\n                    <br/>\r\n                    <input type='submit' class='submit'/>\r\n                    <br></br>\r\n                </form>\r\n                <br></br>\r\n                <br></br>\r\n                <h2>Result = {this.state.result}</h2>\r\n            </div>\r\n        );\r\n    }\r\n}","export function phi(n){\r\n    // Initialize\r\n    // result as n\r\n    let result = n;\r\n \r\n    // Consider all prime\r\n    // factors of n and subtract\r\n    // their multiples from result\r\n    for (let p = 2; p * p <= n; ++p){\r\n         \r\n        // Check if p is\r\n        // a prime factor.\r\n        if (n % p === 0){\r\n            // If yes, then\r\n            // update n and result\r\n            while (n % p === 0)\r\n                n = parseInt(n / p);\r\n            result -= parseInt(result / p);\r\n        }\r\n    }\r\n \r\n    // If n has a prime factor\r\n    // greater than sqrt(n)\r\n    // (There can be at-most\r\n    // one such prime factor)\r\n    if (n > 1)\r\n        result -= parseInt(result / n);\r\n    return result;\r\n}","export function sigma(n){\r\n    //this function finds the sum of all divisors of n\r\n    var sum = 0;\r\n    for (var i = 1; i <= n; i++){\r\n        if (!(n % i)) {\r\n        sum += i;\r\n        }\r\n    }\r\n    return sum;\r\n}","export function numdivisors(n){\r\n    //this function returns the number of positive integer divisors of an integer n\r\n    var num = 0;\r\n    for (var i = 1; i <= n; i++){\r\n        if (!(n % i)) {\r\n        num += 1;\r\n        }\r\n    }\r\n    return num;\r\n}","import React from 'react';\nimport './App.css';\nimport { SVCalculator } from './SingleVarCalculator';\nimport { phi } from './logic/phi';\nimport { sigma } from './logic/sigma';\nimport { numdivisors } from './logic/numdivisors';\n//functions to include: sigma(n), d(n), phi(n), modulo, modular inverses, finding the order of something\n\nexport default class App extends React.Component {  \n  render (){\n    return (\n      <div className=\"App\">\n        <h1>Number Theory Calculator</h1>\n        <p>Common functions you might need to use!</p>\n        <div class='row'>\n          <div class='column'>\n            <SVCalculator name='Phi Calculator' clickHandler={phi}/>\n          </div>\n          <div class='column'>\n            <SVCalculator name='Sigma Calculator' clickHandler={sigma}/>\n          </div>\n          <div class='column'>\n            <SVCalculator name='D Calculator' clickHandler={numdivisors}/>\n          </div>\n        </div>\n        <div class='row'>\n          <div class='column'>\n\n          </div>\n          <div class='column'>\n        \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}